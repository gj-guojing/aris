#include "test_dynamic_screw.h"
#include <iostream>
#include <aris/dynamic/dynamic.hpp>
#include <aris/core/core.hpp>

using namespace aris::dynamic;

const double error = 1e-10;

void test_cross_3(){
	double result[36];
	
	const double cm3[9] = { 0,  -0.6, 0.25, 0.6, 0,  -0.12, -0.25, 0.12, 0 };
	
	const double a1[]{ 0.12, 0.25, 0.6 };
	const double b1[]{ 0.13, -0.21, 0.33 };
	const double r1[]{ 0.2085,0.0384,-0.0577 };
	double c1[]{0,0,0};

	const double a2[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b2[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r2[]{ 0.2085,0,0.0384,0,-0.0577,0 };
	double c2[]{ 0,0,0,0,0,0 };

	const double a3[]{ 0.12, 0.25, 0.6 };
	const double b3[]{ 0.13, -0.21, 0.33 };
	const double r3[]{ 0.052125,0.0096,-0.014425 };
	double c3[]{ 0.2085,0.0384,-0.0577 };

	const double a4[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b4[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r4[]{ 0.052125,0,0.0096,0,-0.014425,0 };
	double c4[]{ 0.2085,0,0.0384,0,-0.0577,0 };

	const double a5[]{ 0.12, 0.25, 0.6 };
	const double b5[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r5[]{ 0.2085,-0.045,0.0384,0.024,-0.0577,-0.001 };
	double c5[]{ 0,0,0,0,0,0 };

	const double a6[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b6[]{ 0.13, 0.1,0,0,-0.21, 0.2,0,0,0.33,0.3,0,0 };
	const double r6[]{ 0.2085,-0.045,0,0.0384,0.024,0,-0.0577,-0.001,0 };
	double c6[]{ 0,0,0,0,0,0,0,0,0 };

	const double a7[]{ 0.12, 0.25, 0.6 };
	const double b7[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r7[]{ 0.052125,-0.01125,0.0096,0.006,-0.014425,-0.00025 };
	double c7[]{ 0.2085,-0.045,0.0384,0.024,-0.0577,-0.001 };

	const double a8[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b8[]{ 0.13, 0.1,0,0,-0.21, 0.2,0,0,0.33,0.3,0,0 };
	const double r8[]{ 0.052125,-0.01125,0,0.0096,0.006,0,-0.014425,-0.00025,0 };
	double c8[]{ 0.2085,-0.045,0,0.0384,0.024,0,-0.0577,-0.001,0 };

	const double a9[]{ 0.12, 0.25, 0.6 };
	const double b9[]{ 0.13, -0.21, 0.33 };
	const double r9[]{ 0.3085,   0.2384,   0.2923 };
	double c9[]{ 0.1,0.2,0.35 };

	const double a10[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b10[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r10[]{ 0.3085,0,   0.2384,0,   0.2923,0 };
	double c10[]{ 0.1,0,0.2,0,0.35,0 };

	const double a11[]{ 0.12, 0.25, 0.6 };
	const double b11[]{ 0.13, -0.21, 0.33 };
	const double r11[]{ 0.152125,0.2096,0.335575 };
	double c11[]{ 0.1,0.2,0.35 };

	const double a12[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b12[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r12[]{ 0.152125,0,0.2096,0,0.335575,0 };
	double c12[]{ 0.1,0,0.2,0,0.35,0 };

	const double a13[]{ 0.12, 0.25, 0.6 };
	const double b13[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r13[]{ 0.3085,   0.065,   0.2384,   0.244,   0.2923,   0.329 };
	double c13[]{ 0.1,0.11,0.2,0.22,0.35,0.33 };

	const double a14[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b14[]{ 0.13, 0.1,0,0,-0.21,0.2,0,0,0.33,0.3,0,0 };
	const double r14[]{ 0.3085,0.065,0,0.2384,0.244,0,0.2923,0.329,0 };
	double c14[]{ 0.1,0.11,0,0.2,0.22,0,0.35,0.33,0 };

	const double a15[]{ 0.12, 0.25, 0.6 };
	const double b15[]{ 0.13, 0.1,-0.21,0.2,0.33,0.3 };
	const double r15[]{ 0.152125,0.09875,0.2096,0.226,0.335575,0.32975 };
	double c15[]{ 0.1,0.11,0.2,0.22,0.35,0.33 };

	const double a16[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b16[]{ 0.13, 0.1,0,0,-0.21,0.2,0,0,0.33,0.3,0,0 };
	const double r16[]{ 0.152125,0.09875,0,0.2096,0.226,0,0.335575,0.32975,0 };
	double c16[]{ 0.1,0.11,0,0.2,0.22,0,0.35,0.33,0 };

	const double a17[]{ 0.12, 0.25, 0.6 };
	const double b17[]{ 0.13, -0.21, 0.33 };
	const double r17[]{ -0.2085,-0.0384,0.0577 };
	double c17[]{ 0,0,0 };

	const double a18[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b18[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r18[]{ -0.2085,0,-0.0384,0,0.0577,0 };
	double c18[]{ 0,0,0,0,0,0 };

	const double a19[]{ 0.12, 0.25, 0.6 };
	const double b19[]{ 0.13, -0.21, 0.33 };
	const double r19[]{ -0.3085,   -0.2384,   -0.2923 };
	double c19[]{ -0.1,-0.2,-0.35 };

	const double a20[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b20[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r20[]{ -0.3085,0,   -0.2384,0,   -0.2923,0 };
	double c20[]{ -0.1,0,-0.2,0,-0.35,0 };

	const double a21[]{ 0.12, 0.25, 0.6 };
	const double b21[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r21[]{ -0.2085,0.045,-0.0384,-0.024,0.0577,0.001 };
	double c21[]{ 0,0,0,0,0,0 };

	const double a22[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b22[]{ 0.13, 0.1,0,0,-0.21, 0.2,0,0,0.33,0.3,0,0 };
	const double r22[]{ -0.2085,0.045,0,-0.0384,-0.024,0,0.0577,0.001,0 };
	double c22[]{ 0,0,0,0,0,0,0,0,0 };

	const double a23[]{ 0.12, 0.25, 0.6 };
	const double b23[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r23[]{ -0.3085,   -0.065,   -0.2384,   -0.244,   -0.2923,   -0.329 };
	double c23[]{ -0.1,-0.11,-0.2,-0.22,-0.35,-0.33 };

	const double a24[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b24[]{ 0.13, 0.1,0,0,-0.21,0.2,0,0,0.33,0.3,0,0 };
	const double r24[]{ -0.3085,-0.065,0,-0.2384,-0.244,0,-0.2923,-0.329,0 };
	double c24[]{ -0.1,-0.11,0,-0.2,-0.22,0,-0.35,-0.33,0 };

	s_cm3(a1, result);
	if (!s_is_equal(9, result, cm3, error))std::cout << "\"s_cm3\" failed" << std::endl;

	s_c3(a1, b1, c1);
	if (!s_is_equal(3, c1, r1, error))std::cout << "\"s_c3\" failed" << std::endl;
	
	s_c3(a2,4, b2,3, c2,2);
	if (!s_is_equal(6, c2, r2, error))std::cout << "\"s_c3 with ld\" failed" << std::endl;

	s_c3(0.25, a3, b3, c3);
	if (!s_is_equal(3, c3, r3, error))std::cout << "\"s_c3\" failed" << std::endl;

	s_c3(0.25, a4, 4, b4, 3, c4, 2);
	if (!s_is_equal(6, c4, r4, error))std::cout << "\"s_c3 with ld\" failed" << std::endl;

	s_c3_n(2, a5, b5, c5);
	if (!s_is_equal(6, c5, r5, error))std::cout << "\"s_c3_n\" failed" << std::endl;

	s_c3_n(2, a6, 5, b6, 4, c6, 3);
	if (!s_is_equal(9, c6, r6, error))std::cout << "\"s_c3_n with ld\" failed" << std::endl;

	s_c3_n(2, 0.25, a7, b7, c7);
	if (!s_is_equal(6, c7, r7, error))std::cout << "\"s_c3_n\" failed" << std::endl;

	s_c3_n(2, 0.25, a8, 5, b8, 4, c8, 3);
	if (!s_is_equal(9, c8, r8, error))std::cout << "\"s_c3_n with ld\" failed" << std::endl;

	s_c3a(a9, b9, c9);
	if (!s_is_equal(3, c9, r9, error))std::cout << "\"s_c3a\" failed" << std::endl;

	s_c3a(a10, 4, b10, 3, c10, 2);
	if (!s_is_equal(6, c10, r10, error))std::cout << "\"s_c3a with ld\" failed" << std::endl;

	s_c3a(0.25, a11, b11, c11);
	if (!s_is_equal(3, c11, r11, error))std::cout << "\"s_c3a\" failed" << std::endl;

	s_c3a(0.25, a12, 4, b12, 3, c12, 2);
	if (!s_is_equal(6, c12, r12, error))std::cout << "\"s_c3a with ld\" failed" << std::endl;

	s_c3a_n(2, a13, b13, c13);
	if (!s_is_equal(6, c13, r13, error))std::cout << "\"s_c3a_n\" failed" << std::endl;

	s_c3a_n(2, a14, 5, b14, 4, c14, 3);
	if (!s_is_equal(9, c14, r14, error))std::cout << "\"s_c3a_n with ld\" failed" << std::endl;

	s_c3a_n(2, 0.25, a15, b15, c15);
	if (!s_is_equal(6, c15, r15, error))std::cout << "\"s_c3a_n\" failed" << std::endl;

	s_c3a_n(2, 0.25, a16, 5, b16, 4, c16, 3);
	if (!s_is_equal(9, c16, r16, error))std::cout << "\"s_c3a_n with ld\" failed" << std::endl;

	s_c3i(a17, b17, c17);
	if (!s_is_equal(3, c17, r17, error))std::cout << "\"s_c3i\" failed" << std::endl;

	s_c3i(a18, 4, b18, 3, c18, 2);
	if (!s_is_equal(6, c18, r18, error))std::cout << "\"s_c3i with ld\" failed" << std::endl;

	s_c3s(a19, b19, c19);
	if (!s_is_equal(3, c19, r19, error))std::cout << "\"s_c3s\" failed" << std::endl;

	s_c3s(a20, 4, b20, 3, c20, 2);
	if (!s_is_equal(6, c20, r20, error))std::cout << "\"s_c3s with ld\" failed" << std::endl;

	s_c3i_n(2, a21, b21, c21);
	if (!s_is_equal(6, c21, r21, error))std::cout << "\"s_c3i_n\" failed" << std::endl;

	s_c3i_n(2, a22, 5, b22, 4, c22, 3);
	if (!s_is_equal(9, c22, r22, error))std::cout << "\"s_c3i_n with ld\" failed" << std::endl;

	s_c3s_n(2, a23, b23, c23);
	if (!s_is_equal(6, c23, r23, error))std::cout << "\"s_c3s_n\" failed" << std::endl;

	s_c3s_n(2, a24, 5, b24, 4, c24, 3);
	if (!s_is_equal(9, c24, r24, error))std::cout << "\"s_c3s_n with ld\" failed" << std::endl;
}
void test_cross_f(){
	double result[36];

	const double cmf[]{ 0,-0.63,0.52,0,0,0,0.63,0,-0.41,0,0,0,-0.52,0.41,0,0,0,0,0,-0.3,0.2,0,-0.63,0.52,0.3,0,-0.1,0.63,0,-0.41,-0.2,0.1,0,-0.52,0.41,0 };

	const double vs1[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f1[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf1[]{ 0.6083,0.308,-0.6501,-0.1144,-0.0154,0.2024 };
	double cf1[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs2[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f2[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf2[]{ 0.6083,0,0.308,0,-0.6501,0,-0.1144,0,-0.0154,0,0.2024,0 };
	double cf2[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs3[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f3[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf3[]{ 0.152075,0.077,-0.162525,-0.0286,-0.00385,0.0506 };
	double cf3[]{ 0.6083,0.308,-0.6501,-0.1144,-0.0154,0.2024 };

	const double vs4[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f4[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf4[]{ 0.152075,0,0.077,0,-0.162525,0,-0.0286,0,-0.00385,0,0.0506,0 };
	double cf4[]{ 0.6083,0,0.308,0,-0.6501,0,-0.1144,0,-0.0154,0,0.2024,0 };

	const double vs5[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f5[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf5[]{ 0.6083,0.03,0.308,-0.06,-0.6501,0.03,-0.1144,-0.003,-0.0154,0.006,0.2024,-0.003 };
	double cf5[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs6[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f6[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf6[]{ 0.6083,0.03,0,0.308,-0.06,0,-0.6501,0.03,0,-0.1144,-0.003,0,-0.0154,0.006,0,0.2024,-0.003,0 };
	double cf6[]{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs7[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f7[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf7[]{ 0.152075,0.0075,0.077,-0.015,-0.162525,0.0075,-0.0286,-0.00075,-0.00385,0.0015,0.0506,-0.00075 };
	double cf7[]{ 0.6083,0.03,0.308,-0.06,-0.6501,0.03,-0.1144,-0.003,-0.0154,0.006,0.2024,-0.003 };

	const double vs8[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f8[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf8[]{ 0.152075,0.0075,0,0.077,-0.015,0,-0.162525,0.0075,0,-0.0286,-0.00075,0,-0.00385,0.0015,0,0.0506,-0.00075,0 };
	double cf8[]{ 0.6083,0.03,0,0.308,-0.06,0,-0.6501,0.03,0,-0.1144,-0.003,0,-0.0154,0.006,0,0.2024,-0.003,0 };

	const double vs9[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f9[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf9[]{ 0.9683,0.538,0.1999,1.0056,0.8746,-0.1376 };
	double cf9[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double vs10[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f10[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf10[]{ 0.9683,0,0.538,0,0.1999,0,1.0056,0,0.8746,0,-0.1376,0 };
	double cf10[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double vs11[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f11[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf11[]{ 0.512075,0.307,0.687475,1.0914,0.88615,-0.2894 };
	double cf11[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double vs12[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f12[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf12[]{ 0.512075,0,0.307,0,0.687475,0,1.0914,0,0.88615,0,-0.2894,0 };
	double cf12[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double vs13[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f13[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf13[]{ 0.9683,0.155,0.538,0.175,0.1999,-0.345,1.0056,0.442,0.8746,0.581,-0.1376,-0.668 };
	double cf13[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double vs14[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f14[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf14[]{ 0.9683,0.155,0,0.538,0.175,0,0.1999,-0.345,0,1.0056,0.442,0,0.8746,0.581,0,-0.1376,-0.668,0 };
	double cf14[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };

	const double vs15[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f15[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf15[]{ 0.512075,0.1325,0.307,0.22,0.687475,-0.3675,1.0914,0.44425,0.88615,0.5765,-0.2894,-0.66575 };
	double cf15[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double vs16[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f16[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf16[]{ 0.512075,0.1325,0,0.307,0.22,0,0.687475,-0.3675,0,1.0914,0.44425,0,0.88615,0.5765,0,-0.2894,-0.66575,0 };
	double cf16[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };

	const double vs17[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f17[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf17[]{ -0.6083,-0.308,0.6501,0.1144,0.0154,-0.2024 };
	double cf17[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs18[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f18[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf18[]{ -0.6083,0,-0.308,0,0.6501,0,0.1144,0,0.0154,0,-0.2024,0 };
	double cf18[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs19[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f19[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf19[]{ -0.9683,-0.538,-0.1999,-1.0056,-0.8746,0.1376 };
	double cf19[]{ -0.36,-0.23,-0.85,-1.12,-0.89,0.34 };

	const double vs20[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f20[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf20[]{ -0.9683,0,-0.538,0,-0.1999,0,-1.0056,0,-0.8746,0,0.1376,0 };
	double cf20[]{ -0.36,0,-0.23,0,-0.85,0,-1.12,0,-0.89,0,0.34,0 };

	const double vs21[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f21[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf21[]{ -0.6083,-0.03,-0.308,0.06,0.6501,-0.03,0.1144,0.003,0.0154,-0.006,-0.2024,0.003 };
	double cf21[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs22[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f22[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf22[]{ -0.6083,-0.03,0,-0.308,0.06,0,0.6501,-0.03,0,0.1144,0.003,0,0.0154,-0.006,0,-0.2024,0.003,0 };
	double cf22[]{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs23[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f23[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf23[]{ -0.9683,-0.155,-0.538,-0.175,-0.1999,0.345,-1.0056,-0.442,-0.8746,-0.581,0.1376,0.668 };
	double cf23[]{ -0.36,-0.125,-0.23,-0.235,-0.85,0.375,-1.12,-0.445,-0.89,-0.575,0.34,0.665 };

	const double vs24[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f24[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf24[]{ -0.9683,-0.155,0,-0.538,-0.175,0,-0.1999,0.345,0,-1.0056,-0.442,0,-0.8746,-0.581,0,0.1376,0.668,0 };
	double cf24[]{ -0.36,-0.125,0,-0.23,-0.235,0,-0.85,0.375,0,-1.12,-0.445,0,-0.89,-0.575,0,0.34,0.665,0 };


	s_cmf(vs1, result);
	if (!s_is_equal(36, cmf, result, error))std::cout << "\"s_cmf\" failed" << std::endl;

	s_cf(vs1, f1, cf1);
	if (!s_is_equal(6, rf1, cf1, error))std::cout << "\"s_cf\" failed" << std::endl;

	s_cf(vs2, 4, f2, 3, cf2, 2);
	if (!s_is_equal(12, rf2, cf2, error))std::cout << "\"s_cf with ld\" failed" << std::endl;

	s_cf(0.25, vs3, f3, cf3);
	if (!s_is_equal(6, rf3, cf3, error))std::cout << "\"s_cf\" failed" << std::endl;

	s_cf(0.25, vs4, 4, f4, 3, cf4, 2);
	if (!s_is_equal(12, rf4, cf4, error))std::cout << "\"s_cf with ld\" failed" << std::endl;

	s_cf_n(2, vs5, f5, cf5);
	if (!s_is_equal(12, rf5, cf5, error))std::cout << "\"s_cf_n\" failed" << std::endl;

	s_cf_n(2, vs6, 5, f6, 4, cf6, 3);
	if (!s_is_equal(18, rf6, cf6, error))std::cout << "\"s_cf_n with ld\" failed" << std::endl;

	s_cf_n(2, 0.25, vs7, f7, cf7);
	if (!s_is_equal(12, rf7, cf7, error))std::cout << "\"s_cf_n\" failed" << std::endl;

	s_cf_n(2, 0.25, vs8, 5, f8, 4, cf8, 3);
	if (!s_is_equal(18, rf8, cf8, error))std::cout << "\"s_cf_n with ld\" failed" << std::endl;

	s_cfa(vs9, f9, cf9);
	if (!s_is_equal(6, rf9, cf9, error))std::cout << "\"s_cfa\" failed" << std::endl;

	s_cfa(vs10, 4, f10, 3, cf10, 2);
	if (!s_is_equal(12, rf10, cf10, error))std::cout << "\"s_cfa with ld\" failed" << std::endl;

	s_cfa(0.25, vs11, f11, cf11);
	if (!s_is_equal(6, rf11, cf11, error))std::cout << "\"s_cfa\" failed" << std::endl;

	s_cfa(0.25, vs12, 4, f12, 3, cf12, 2);
	if (!s_is_equal(12, rf12, cf12, error))std::cout << "\"s_cfa with ld\" failed" << std::endl;

	s_cfa_n(2, vs13, f13, cf13);
	if (!s_is_equal(12, rf13, cf13, error))std::cout << "\"s_cfa_n\" failed" << std::endl;

	s_cfa_n(2, vs14, 5, f14, 4, cf14, 3);
	if (!s_is_equal(18, rf14, cf14, error))std::cout << "\"s_cfa_n with ld\" failed" << std::endl;

	s_cfa_n(2, 0.25, vs15, f15, cf15);
	if (!s_is_equal(12, rf15, cf15, error))std::cout << "\"s_cfa_n\" failed" << std::endl;

	s_cfa_n(2, 0.25, vs16, 5, f16, 4, cf16, 3);
	if (!s_is_equal(18, rf16, cf16, error))std::cout << "\"s_cfa_n with ld\" failed" << std::endl;

	s_cfi(vs17, f17, cf17);
	if (!s_is_equal(3, rf17, cf17, error))std::cout << "\"s_cfi\" failed" << std::endl;

	s_cfi(vs18, 4, f18, 3, cf18, 2);
	if (!s_is_equal(6, rf18, cf18, error))std::cout << "\"s_cfi with ld\" failed" << std::endl;

	s_cfs(vs19, f19, cf19);
	if (!s_is_equal(3, cf19, rf19, error))std::cout << "\"s_cfs\" failed" << std::endl;

	s_cfs(vs20, 4, f20, 3, cf20, 2);
	if (!s_is_equal(6, cf20, rf20, error))std::cout << "\"s_cfs with ld\" failed" << std::endl;

	s_cfi_n(2, vs21, f21, cf21);
	if (!s_is_equal(6, rf21, cf21, error))std::cout << "\"s_cfi_n\" failed" << std::endl;

	s_cfi_n(2, vs22, 5, f22, 4, cf22, 3);
	if (!s_is_equal(9, rf22, cf22, error))std::cout << "\"s_cfi_n with ld\" failed" << std::endl;

	s_cfs_n(2, vs23, f23, cf23);
	if (!s_is_equal(6, cf23, rf23, error))std::cout << "\"s_cfs_n\" failed" << std::endl;

	s_cfs_n(2, vs24, 5, f24, 4, cf24, 3);
	if (!s_is_equal(9, cf24, rf24, error))std::cout << "\"s_cfs_n with ld\" failed" << std::endl;
}
void test_cross_v(){
	double result[36];

	const double cmv[]{ 0,-0.63,0.52,0,-0.3,0.2,0.63,0,-0.41,0.3,0,-0.1,-0.52,0.41,0,-0.2,0.1,0,0,0,0,0,-0.63,0.52,	0,0,0,0.63,0,-0.41,0,0,0,-0.52,0.41,0 };

	const double v1[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w1[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv1[]{ 0.4543,0.154,-0.4961,-0.3674,-0.2354,0.4334 };
	double cv1[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v2[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w2[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv2[]{ 0.4543,0,0.154,0,-0.4961,0,-0.3674,0,-0.2354,0,0.4334,0 };
	double cv2[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v3[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w3[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv3[]{ 0.113575,0.0385,-0.124025,-0.09185,-0.05885,0.10835 };
	double cv3[]{ 0.6083,0.308,-0.6501,-0.1144,-0.0154,0.2024 };

	const double v4[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w4[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv4[]{ 0.113575,0,0.0385,0,-0.124025,0,-0.09185,0,-0.05885,0,0.10835,0 };
	double cv4[]{ 0.6083,0,0.308,0,-0.6501,0,-0.1144,0,-0.0154,0,0.2024,0 };

	const double v5[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w5[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv5[]{ 0.4543,-0.3287,0.154,0.2857,-0.4961,-0.0219,-0.3674,-0.003,-0.2354,0.006,0.4334,-0.003 };
	double cv5[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v6[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w6[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv6[]{ 0.4543,-0.3287,0,0.154,0.2857,0,-0.4961,-0.0219,0,-0.3674,-0.003,0,-0.2354,0.006,0,0.4334,-0.003,0 };
	double cv6[]{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v7[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w7[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv7[]{ 0.113575,-0.082175,0.0385,0.071425,-0.124025,-0.005475,-0.09185,-0.00075,-0.05885,0.0015,0.10835,-0.00075 };
	double cv7[]{ 0.6083,0.03,0.308,-0.06,-0.6501,0.03,-0.1144,-0.003,-0.0154,0.006,0.2024,-0.003 };

	const double v8[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w8[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv8[]{ 0.113575,-0.082175,0,0.0385,0.071425,0,-0.124025,-0.005475,0,-0.09185,-0.00075,0,-0.05885,0.0015,0,0.10835,-0.00075,0 };
	double cv8[]{ 0.6083,0.03,0,0.308,-0.06,0,-0.6501,0.03,0,-0.1144,-0.003,0,-0.0154,0.006,0,0.2024,-0.003,0 };

	const double v9[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w9[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv9[]{ 0.8143,0.384,0.3539,0.7526,0.6546,0.0934 };
	double cv9[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double v10[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w10[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv10[]{ 0.8143,0,0.384,0,0.3539,0,0.7526,0,0.6546,0,0.0934,0 };
	double cv10[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double v11[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w11[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv11[]{ 0.473575,0.2685,0.725975,1.02815,0.83115,-0.23165 };
	double cv11[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double v12[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w12[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv12[]{ 0.473575,0,0.2685,0,0.725975,0,1.02815,0,0.83115,0,-0.23165,0 };
	double cv12[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double v13[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w13[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv13[]{ 0.8143,-0.2037,0.384,0.5207,0.3539,-0.3969,0.7526,0.442,0.6546,0.581,0.0934,-0.668 };
	double cv13[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double v14[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w14[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv14[]{ 0.8143,-0.2037,0,0.384,0.5207,0,0.3539,-0.3969,0,0.7526,0.442,0,0.6546,0.581,0,0.0934,-0.668,0 };
	double cv14[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };

	const double v15[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w15[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv15[]{ 0.473575,0.042825,0.2685,0.306425,0.725975,-0.380475,1.02815,0.44425,0.83115,0.5765,-0.23165,-0.66575 };
	double cv15[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double v16[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w16[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv16[]{ 0.473575,0.042825,0,0.2685,0.306425,0,0.725975,-0.380475,0,1.02815,0.44425,0,0.83115,0.5765,0,-0.23165,-0.66575,0 };
	double cv16[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };

	const double v17[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w17[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv17[]{ -0.4543,-0.154,0.4961,0.3674,0.2354,-0.4334 };
	double cv17[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v18[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w18[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv18[]{ -0.4543,0,-0.154,0,0.4961,0,0.3674,0,0.2354,0,-0.4334,0 };
	double cv18[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v19[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w19[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv19[]{ -0.8143,-0.384,-0.3539,-0.7526,-0.6546,-0.0934 };
	double cv19[]{ -0.36,-0.23,-0.85,-1.12,-0.89,0.34 };

	const double v20[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w20[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv20[]{ -0.8143,0,-0.384,0,-0.3539,0,-0.7526,0,-0.6546,0,-0.0934,0 };
	double cv20[]{ -0.36,0,-0.23,0,-0.85,0,-1.12,0,-0.89,0,0.34,0 };

	const double v21[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w21[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv21[]{ -0.4543,0.3287,-0.154,-0.2857,0.4961,0.0219,0.3674,0.003,0.2354,-0.006,-0.4334,0.003 };
	double cv21[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v22[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w22[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv22[]{ -0.4543,0.3287,0,-0.154,-0.2857,0,0.4961,0.0219,0,0.3674,0.003,0,0.2354,-0.006,0,-0.4334,0.003,0 };
	double cv22[]{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v23[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w23[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv23[]{ -0.8143,0.2037,-0.384,-0.5207,-0.3539,0.3969,-0.7526,-0.442,-0.6546,-0.581,-0.0934,0.668 };
	double cv23[]{ -0.36,-0.125,-0.23,-0.235,-0.85,0.375,-1.12,-0.445,-0.89,-0.575,0.34,0.665 };

	const double v24[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w24[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv24[]{ -0.8143,0.2037,0,-0.384,-0.5207,0,-0.3539,0.3969,0,-0.7526,-0.442,0,-0.6546,-0.581,0,-0.0934,0.668,0 };
	double cv24[]{ -0.36,-0.125,0,-0.23,-0.235,0,-0.85,0.375,0,-1.12,-0.445,0,-0.89,-0.575,0,0.34,0.665,0 };


	s_cmv(v1, result);
	if (!s_is_equal(36, cmv, result, error))std::cout << "\"s_cmv\" failed" << std::endl;

	s_cv(v1, w1, cv1);
	if (!s_is_equal(6, rv1, cv1, error))std::cout << "\"s_cv\" failed" << std::endl;

	s_cv(v2, 4, w2, 3, cv2, 2);
	if (!s_is_equal(12, rv2, cv2, error))std::cout << "\"s_cv with ld\" failed" << std::endl;

	s_cv(0.25, v3, w3, cv3);
	if (!s_is_equal(6, rv3, cv3, error))std::cout << "\"s_cv\" failed" << std::endl;

	s_cv(0.25, v4, 4, w4, 3, cv4, 2);
	if (!s_is_equal(12, rv4, cv4, error))std::cout << "\"s_cv with ld\" failed" << std::endl;

	s_cv_n(2, v5, w5, cv5);
	if (!s_is_equal(12, rv5, cv5, error))std::cout << "\"s_cv_n\" failed" << std::endl;

	s_cv_n(2, v6, 5, w6, 4, cv6, 3);
	if (!s_is_equal(18, rv6, cv6, error))std::cout << "\"s_cv_n with ld\" failed" << std::endl;

	s_cv_n(2, 0.25, v7, w7, cv7);
	if (!s_is_equal(12, rv7, cv7, error))std::cout << "\"s_cv_n\" failed" << std::endl;

	s_cv_n(2, 0.25, v8, 5, w8, 4, cv8, 3);
	if (!s_is_equal(18, rv8, cv8, error))std::cout << "\"s_cv_n with ld\" failed" << std::endl;

	s_cva(v9, w9, cv9);
	if (!s_is_equal(6, rv9, cv9, error))std::cout << "\"s_cva\" failed" << std::endl;

	s_cva(v10, 4, w10, 3, cv10, 2);
	if (!s_is_equal(12, rv10, cv10, error))std::cout << "\"s_cva with ld\" failed" << std::endl;

	s_cva(0.25, v11, w11, cv11);
	if (!s_is_equal(6, rv11, cv11, error))std::cout << "\"s_cva\" failed" << std::endl;

	s_cva(0.25, v12, 4, w12, 3, cv12, 2);
	if (!s_is_equal(12, rv12, cv12, error))std::cout << "\"s_cva with ld\" failed" << std::endl;

	s_cva_n(2, v13, w13, cv13);
	if (!s_is_equal(12, rv13, cv13, error))std::cout << "\"s_cva_n\" failed" << std::endl;

	s_cva_n(2, v14, 5, w14, 4, cv14, 3);
	if (!s_is_equal(18, rv14, cv14, error))std::cout << "\"s_cva_n with ld\" failed" << std::endl;

	s_cva_n(2, 0.25, v15, w15, cv15);
	if (!s_is_equal(12, rv15, cv15, error))std::cout << "\"s_cva_n\" failed" << std::endl;

	s_cva_n(2, 0.25, v16, 5, w16, 4, cv16, 3);
	if (!s_is_equal(18, rv16, cv16, error))std::cout << "\"s_cva_n with ld\" failed" << std::endl;

	s_cvi(v17, w17, cv17);
	if (!s_is_equal(6, rv17, cv17, error))std::cout << "\"s_cvi\" failed" << std::endl;

	s_cvi(v18, 4, w18, 3, cv18, 2);
	if (!s_is_equal(12, rv18, cv18, error))std::cout << "\"s_cvi with ld\" failed" << std::endl;

	s_cvs(v19, w19, cv19);
	if (!s_is_equal(6, rv19, cv19, error))std::cout << "\"s_cvs\" failed" << std::endl;

	s_cvs(v20, 4, w20, 3, cv20, 2);
	if (!s_is_equal(12, rv20, cv20, error))std::cout << "\"s_cvs with ld\" failed" << std::endl;

	s_cvi_n(2, v21, w21, cv21);
	if (!s_is_equal(6, rv21, cv21, error))std::cout << "\"s_cvi_n\" failed" << std::endl;

	s_cvi_n(2, v22, 5, w22, 4, cv22, 3);
	if (!s_is_equal(9, rv22, cv22, error))std::cout << "\"s_cvi_n with ld\" failed" << std::endl;

	s_cvs_n(2, v23, w23, cv23);
	if (!s_is_equal(6, rv23, cv23, error))std::cout << "\"s_cvs_n\" failed" << std::endl;

	s_cvs_n(2, v24, 5, w24, 4, cv24, 3);
	if (!s_is_equal(9, rv24, cv24, error))std::cout << "\"s_cvs_n with ld\" failed" << std::endl;
}

void test_screw()
{
	std::cout << std::endl << "-----------------test screw--------------------" << std::endl;

	test_cross_3();
	test_cross_f();
	test_cross_v();

	std::cout << "-----------------test screw finished-----------" << std::endl << std::endl;
}